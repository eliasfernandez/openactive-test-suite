const sharedValidationTests = require('../../shared-behaviours/validation');

/**
 * @typedef {import('chakram').ChakramResponse} ChakramResponse
 * @typedef {import('../../helpers/logger').BaseLoggerType} BaseLoggerType
 * @typedef {import('../../shared-behaviours/validation').ValidationMode} ValidationMode
 */

const FlowStageUtils = {
  /**
   * Create itValidationTestsFn that will work for flow stages whose result
   * is an HTTP response whose body is an OpenActive item.
   *
   * Runs sharedValidationTests.shouldBeValidResponse() against the response.
   *
   * @param {BaseLoggerType} logger
   * @param {object} validationSpec
   * @param {string} validationSpec.name Name to use for tests generated by
   *   validation checks.
   * @param {ValidationMode} validationSpec.validationMode
   */
  simpleValidationTests(logger, { name, validationMode }) {
    return (/** @type {import('./flow-stage').FlowStageType<ChakramResponse>} */ flowStage) => {
      sharedValidationTests.shouldBeValidResponse(
        () => flowStage.getResponse(),
        name,
        logger,
        {
          validationMode,
        },
      );
    };
  },
};

/**
 * FlowStageDefinition: { preRequisite, testName, initialState }
 * FlowStageOutput: { result: FlowStageResult, state: FlowStageState }
 * FlowStageRunner: ({ definition: FlowStageDefinition, stateSoFar: FlowStageState })
 *
 * const foOutput = FlowStage.run(FetchOpportunitiesFlow.run: FlowStageRunner, definition, {}))
 * // ... in a different scope
 * FlowStage.itSuccessChecks(foOutput)
 */

module.exports = {
  FlowStageUtils,
};
